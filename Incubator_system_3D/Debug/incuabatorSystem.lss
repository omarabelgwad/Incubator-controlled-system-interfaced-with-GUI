
incuabatorSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000e42  00000ed6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  008000a0  008000a0  00000f16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ad1  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e62  00000000  00000000  00003c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a38  00000000  00000000  00004ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a8  00000000  00000000  00006520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f63  00000000  00000000  000069c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001898  00000000  00000000  0000792b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000091c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_13>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	b9 04       	cpc	r11, r9
  56:	c3 04       	cpc	r12, r3
  58:	cd 04       	cpc	r12, r13
  5a:	d7 04       	cpc	r13, r7
  5c:	e1 04       	cpc	r14, r1
  5e:	eb 04       	cpc	r14, r11
  60:	f5 04       	cpc	r15, r5
  62:	ff 04       	cpc	r15, r15
  64:	22 05       	cpc	r18, r2
  66:	2d 05       	cpc	r18, r13
  68:	38 05       	cpc	r19, r8
  6a:	42 05       	cpc	r20, r2
  6c:	4d 05       	cpc	r20, r13
  6e:	58 05       	cpc	r21, r8
  70:	63 05       	cpc	r22, r3
  72:	8d 06       	cpc	r8, r29
  74:	98 06       	cpc	r9, r24
  76:	a3 06       	cpc	r10, r19
  78:	ae 06       	cpc	r10, r30
  7a:	b9 06       	cpc	r11, r25
  7c:	c4 06       	cpc	r12, r20
  7e:	cf 06       	cpc	r12, r31
  80:	da 06       	cpc	r13, r26

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf e5       	ldi	r28, 0x5F	; 95
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	10 e0       	ldi	r17, 0x00	; 0
  90:	a0 e6       	ldi	r26, 0x60	; 96
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e2 e4       	ldi	r30, 0x42	; 66
  96:	fe e0       	ldi	r31, 0x0E	; 14
  98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a0 3a       	cpi	r26, 0xA0	; 160
  a0:	b1 07       	cpc	r27, r17
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>

000000a4 <__do_clear_bss>:
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	a0 ea       	ldi	r26, 0xA0	; 160
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
  ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
  ae:	a6 3c       	cpi	r26, 0xC6	; 198
  b0:	b2 07       	cpc	r27, r18
  b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
  b4:	0e 94 35 04 	call	0x86a	; 0x86a <main>
  b8:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <LCD_sendCommand>:
  c0:	98 b3       	in	r25, 0x18	; 24
  c2:	9e 7f       	andi	r25, 0xFE	; 254
  c4:	98 bb       	out	0x18, r25	; 24
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	9d 7f       	andi	r25, 0xFD	; 253
  ca:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	ef ec       	ldi	r30, 0xCF	; 207
  ce:	f7 e0       	ldi	r31, 0x07	; 7
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_sendCommand+0x10>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_sendCommand+0x16>
  d6:	00 00       	nop
  d8:	98 b3       	in	r25, 0x18	; 24
  da:	94 60       	ori	r25, 0x04	; 4
  dc:	98 bb       	out	0x18, r25	; 24
  de:	ef ec       	ldi	r30, 0xCF	; 207
  e0:	f7 e0       	ldi	r31, 0x07	; 7
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_sendCommand+0x22>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_sendCommand+0x28>
  e8:	00 00       	nop
  ea:	95 b3       	in	r25, 0x15	; 21
  ec:	28 2f       	mov	r18, r24
  ee:	22 95       	swap	r18
  f0:	2f 70       	andi	r18, 0x0F	; 15
  f2:	90 7f       	andi	r25, 0xF0	; 240
  f4:	92 2b       	or	r25, r18
  f6:	95 bb       	out	0x15, r25	; 21
  f8:	ef ec       	ldi	r30, 0xCF	; 207
  fa:	f7 e0       	ldi	r31, 0x07	; 7
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_sendCommand+0x3c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_sendCommand+0x42>
 102:	00 00       	nop
 104:	98 b3       	in	r25, 0x18	; 24
 106:	9b 7f       	andi	r25, 0xFB	; 251
 108:	98 bb       	out	0x18, r25	; 24
 10a:	ef ec       	ldi	r30, 0xCF	; 207
 10c:	f7 e0       	ldi	r31, 0x07	; 7
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_sendCommand+0x4e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_sendCommand+0x54>
 114:	00 00       	nop
 116:	98 b3       	in	r25, 0x18	; 24
 118:	94 60       	ori	r25, 0x04	; 4
 11a:	98 bb       	out	0x18, r25	; 24
 11c:	ef ec       	ldi	r30, 0xCF	; 207
 11e:	f7 e0       	ldi	r31, 0x07	; 7
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_sendCommand+0x60>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_sendCommand+0x66>
 126:	00 00       	nop
 128:	95 b3       	in	r25, 0x15	; 21
 12a:	90 7f       	andi	r25, 0xF0	; 240
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	89 2b       	or	r24, r25
 130:	85 bb       	out	0x15, r24	; 21
 132:	8f ec       	ldi	r24, 0xCF	; 207
 134:	97 e0       	ldi	r25, 0x07	; 7
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_sendCommand+0x76>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_sendCommand+0x7c>
 13c:	00 00       	nop
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	8b 7f       	andi	r24, 0xFB	; 251
 142:	88 bb       	out	0x18, r24	; 24
 144:	ef ec       	ldi	r30, 0xCF	; 207
 146:	f7 e0       	ldi	r31, 0x07	; 7
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_sendCommand+0x88>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_sendCommand+0x8e>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <LCD_init>:
 152:	87 b3       	in	r24, 0x17	; 23
 154:	87 60       	ori	r24, 0x07	; 7
 156:	87 bb       	out	0x17, r24	; 23
 158:	84 b3       	in	r24, 0x14	; 20
 15a:	8f 60       	ori	r24, 0x0F	; 15
 15c:	84 bb       	out	0x14, r24	; 20
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendCommand>
 164:	88 e2       	ldi	r24, 0x28	; 40
 166:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendCommand>
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendCommand>
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendCommand>
 176:	08 95       	ret

00000178 <LCD_displayCharacter>:
 178:	98 b3       	in	r25, 0x18	; 24
 17a:	91 60       	ori	r25, 0x01	; 1
 17c:	98 bb       	out	0x18, r25	; 24
 17e:	98 b3       	in	r25, 0x18	; 24
 180:	9d 7f       	andi	r25, 0xFD	; 253
 182:	98 bb       	out	0x18, r25	; 24
 184:	ef ec       	ldi	r30, 0xCF	; 207
 186:	f7 e0       	ldi	r31, 0x07	; 7
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_displayCharacter+0x10>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_displayCharacter+0x16>
 18e:	00 00       	nop
 190:	98 b3       	in	r25, 0x18	; 24
 192:	94 60       	ori	r25, 0x04	; 4
 194:	98 bb       	out	0x18, r25	; 24
 196:	ef ec       	ldi	r30, 0xCF	; 207
 198:	f7 e0       	ldi	r31, 0x07	; 7
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_displayCharacter+0x22>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_displayCharacter+0x28>
 1a0:	00 00       	nop
 1a2:	95 b3       	in	r25, 0x15	; 21
 1a4:	28 2f       	mov	r18, r24
 1a6:	22 95       	swap	r18
 1a8:	2f 70       	andi	r18, 0x0F	; 15
 1aa:	90 7f       	andi	r25, 0xF0	; 240
 1ac:	92 2b       	or	r25, r18
 1ae:	95 bb       	out	0x15, r25	; 21
 1b0:	ef ec       	ldi	r30, 0xCF	; 207
 1b2:	f7 e0       	ldi	r31, 0x07	; 7
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_displayCharacter+0x3c>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_displayCharacter+0x42>
 1ba:	00 00       	nop
 1bc:	98 b3       	in	r25, 0x18	; 24
 1be:	9b 7f       	andi	r25, 0xFB	; 251
 1c0:	98 bb       	out	0x18, r25	; 24
 1c2:	ef ec       	ldi	r30, 0xCF	; 207
 1c4:	f7 e0       	ldi	r31, 0x07	; 7
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_displayCharacter+0x4e>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <LCD_displayCharacter+0x54>
 1cc:	00 00       	nop
 1ce:	98 b3       	in	r25, 0x18	; 24
 1d0:	94 60       	ori	r25, 0x04	; 4
 1d2:	98 bb       	out	0x18, r25	; 24
 1d4:	ef ec       	ldi	r30, 0xCF	; 207
 1d6:	f7 e0       	ldi	r31, 0x07	; 7
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCD_displayCharacter+0x60>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LCD_displayCharacter+0x66>
 1de:	00 00       	nop
 1e0:	95 b3       	in	r25, 0x15	; 21
 1e2:	90 7f       	andi	r25, 0xF0	; 240
 1e4:	8f 70       	andi	r24, 0x0F	; 15
 1e6:	89 2b       	or	r24, r25
 1e8:	85 bb       	out	0x15, r24	; 21
 1ea:	8f ec       	ldi	r24, 0xCF	; 207
 1ec:	97 e0       	ldi	r25, 0x07	; 7
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_displayCharacter+0x76>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_displayCharacter+0x7c>
 1f4:	00 00       	nop
 1f6:	88 b3       	in	r24, 0x18	; 24
 1f8:	8b 7f       	andi	r24, 0xFB	; 251
 1fa:	88 bb       	out	0x18, r24	; 24
 1fc:	ef ec       	ldi	r30, 0xCF	; 207
 1fe:	f7 e0       	ldi	r31, 0x07	; 7
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCD_displayCharacter+0x88>
 204:	00 c0       	rjmp	.+0      	; 0x206 <LCD_displayCharacter+0x8e>
 206:	00 00       	nop
 208:	08 95       	ret

0000020a <LCD_displayString>:
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	8c 01       	movw	r16, r24
 212:	c0 e0       	ldi	r28, 0x00	; 0
 214:	03 c0       	rjmp	.+6      	; 0x21c <LCD_displayString+0x12>
 216:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_displayCharacter>
 21a:	cf 5f       	subi	r28, 0xFF	; 255
 21c:	f8 01       	movw	r30, r16
 21e:	ec 0f       	add	r30, r28
 220:	f1 1d       	adc	r31, r1
 222:	80 81       	ld	r24, Z
 224:	81 11       	cpse	r24, r1
 226:	f7 cf       	rjmp	.-18     	; 0x216 <LCD_displayString+0xc>
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <LCD_goToRowColumn>:
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	31 f0       	breq	.+12     	; 0x240 <LCD_goToRowColumn+0x10>
 234:	70 f0       	brcs	.+28     	; 0x252 <LCD_goToRowColumn+0x22>
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	31 f0       	breq	.+12     	; 0x246 <LCD_goToRowColumn+0x16>
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	39 f0       	breq	.+14     	; 0x24c <LCD_goToRowColumn+0x1c>
 23e:	0a c0       	rjmp	.+20     	; 0x254 <LCD_goToRowColumn+0x24>
 240:	90 e4       	ldi	r25, 0x40	; 64
 242:	96 0f       	add	r25, r22
 244:	07 c0       	rjmp	.+14     	; 0x254 <LCD_goToRowColumn+0x24>
 246:	90 e1       	ldi	r25, 0x10	; 16
 248:	96 0f       	add	r25, r22
 24a:	04 c0       	rjmp	.+8      	; 0x254 <LCD_goToRowColumn+0x24>
 24c:	90 e5       	ldi	r25, 0x50	; 80
 24e:	96 0f       	add	r25, r22
 250:	01 c0       	rjmp	.+2      	; 0x254 <LCD_goToRowColumn+0x24>
 252:	96 2f       	mov	r25, r22
 254:	89 2f       	mov	r24, r25
 256:	80 68       	ori	r24, 0x80	; 128
 258:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendCommand>
 25c:	08 95       	ret

0000025e <LCD_displayStringRowColumn>:
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ea 01       	movw	r28, r20
 264:	0e 94 18 01 	call	0x230	; 0x230 <LCD_goToRowColumn>
 268:	ce 01       	movw	r24, r28
 26a:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_displayString>
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <intiallize_temp_sensor>:
		LCD_displayStringRowColumn(1,12,temp_str);
		//auto_mode_handle_and_lcd_status_update();
		PORTA=0;
	}
}

 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	00 d0       	rcall	.+0      	; 0x27a <intiallize_temp_sensor+0x6>
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
void intiallize_temp_sensor()
 27e:	80 ea       	ldi	r24, 0xA0	; 160
 280:	89 83       	std	Y+1, r24	; 0x01
 282:	8a 81       	ldd	r24, Y+2	; 0x02
 284:	8c 7f       	andi	r24, 0xFC	; 252
 286:	81 60       	ori	r24, 0x01	; 1
 288:	8a 83       	std	Y+2, r24	; 0x02
	adc_config temp_sensor={
		.refrence=adc_AVCC_pin,
		.adjust=adc_right_adjust,
		.channel=adc_CH0,
		.prescalar=adc_divide_by_64//125 kHz
	};
 28a:	ce 01       	movw	r24, r28
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <mcal_adc_intiallize>
	
	mcal_adc_intiallize(&temp_sensor);
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <intiallize_DC_fan>:
	//mcal_adc_read_interrupt_value();
}

 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <intiallize_DC_fan+0x6>
 2a2:	00 d0       	rcall	.+0      	; 0x2a4 <intiallize_DC_fan+0x8>
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
void intiallize_DC_fan()
 2a8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <gpio_ddr_reg+0x8>
 2ac:	89 83       	std	Y+1, r24	; 0x01
{
	gpio_pin_config dc_fan1={
		.port=portB,
		.pin=pin4,
		.direction=output,
		.logic=low,
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <mcal_gpio_pin_direction_intiallize>
	};
 2b6:	69 81       	ldd	r22, Y+1	; 0x01
 2b8:	66 fb       	bst	r22, 6
 2ba:	66 27       	eor	r22, r22
 2bc:	60 f9       	bld	r22, 0
 2be:	ce 01       	movw	r24, r28
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	0e 94 f7 05 	call	0xbee	; 0xbee <mcal_gpio_pin_output_write_logic>
	mcal_gpio_pin_direction_intiallize(&dc_fan1);
	mcal_gpio_pin_output_write_logic(&dc_fan1,dc_fan1.logic);
 2c6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <gpio_ddr_reg+0x9>
 2ca:	8a 83       	std	Y+2, r24	; 0x02
	
	gpio_pin_config dc_fan2={
		.port=portB,
		.pin=pin5,
		.direction=output,
		.logic=high,
 2cc:	ce 01       	movw	r24, r28
 2ce:	02 96       	adiw	r24, 0x02	; 2
 2d0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <mcal_gpio_pin_direction_intiallize>
	};
 2d4:	6a 81       	ldd	r22, Y+2	; 0x02
 2d6:	66 fb       	bst	r22, 6
 2d8:	66 27       	eor	r22, r22
 2da:	60 f9       	bld	r22, 0
 2dc:	ce 01       	movw	r24, r28
 2de:	02 96       	adiw	r24, 0x02	; 2
 2e0:	0e 94 f7 05 	call	0xbee	; 0xbee <mcal_gpio_pin_output_write_logic>
	mcal_gpio_pin_direction_intiallize(&dc_fan2);
	mcal_gpio_pin_output_write_logic(&dc_fan2,dc_fan2.logic);
 2e4:	83 e0       	ldi	r24, 0x03	; 3
 2e6:	8b 83       	std	Y+3, r24	; 0x03
 2e8:	8c 83       	std	Y+4, r24	; 0x04
	
	pwm_config dc_fan_pwm={
		.mode=fast_pwm_mode,
		.clock_prescale=prescalar_divide_by_64,
 2ea:	ce 01       	movw	r24, r28
 2ec:	03 96       	adiw	r24, 0x03	; 3
 2ee:	0e 94 3e 06 	call	0xc7c	; 0xc7c <mcal_PWM0_intiallize>
	};
 2f2:	1c be       	out	0x3c, r1	; 60
	mcal_PWM0_intiallize(&dc_fan_pwm);
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <intiallize_ac_lamp>:
	OCR0=0;
}

void intiallize_ac_lamp()
 302:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <ac_lamp>
 306:	80 62       	ori	r24, 0x20	; 32
{
 308:	8c 7f       	andi	r24, 0xFC	; 252
 30a:	81 60       	ori	r24, 0x01	; 1
	ac_lamp.direction=output;
 30c:	83 7e       	andi	r24, 0xE3	; 227
	ac_lamp.port=portB;
 30e:	88 61       	ori	r24, 0x18	; 24
 310:	80 64       	ori	r24, 0x40	; 64
 312:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <ac_lamp>
	ac_lamp.pin=pin6;
 316:	8f eb       	ldi	r24, 0xBF	; 191
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <mcal_gpio_pin_direction_intiallize>
 31e:	08 95       	ret

00000320 <getvalue>:
			USART_TransmitString("H%");
		}
		if(temp_val < lower_temp)
		{
			temp_status=1;
			USART_TransmitString("L%");
 320:	28 2f       	mov	r18, r24
		}
 322:	33 e0       	ldi	r19, 0x03	; 3
 324:	38 0f       	add	r19, r24
		if ((temp_val>=lower_temp)&&(temp_val<=upper_temp))
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
		{
 32a:	1c c0       	rjmp	.+56     	; 0x364 <getvalue+0x44>
			temp_status=0;
			USART_TransmitString("N%");
 32c:	62 2f       	mov	r22, r18
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	fb 01       	movw	r30, r22
 332:	e2 55       	subi	r30, 0x52	; 82
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	40 81       	ld	r20, Z
 338:	84 0f       	add	r24, r20
 33a:	91 1d       	adc	r25, r1
 33c:	c0 97       	sbiw	r24, 0x30	; 48
		}
 33e:	43 2f       	mov	r20, r19
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	41 50       	subi	r20, 0x01	; 1
 344:	51 09       	sbc	r21, r1
 346:	64 17       	cp	r22, r20
 348:	75 07       	cpc	r23, r21
 34a:	5c f4       	brge	.+22     	; 0x362 <getvalue+0x42>
	}
}
 34c:	ac 01       	movw	r20, r24
 34e:	44 0f       	add	r20, r20
 350:	55 1f       	adc	r21, r21
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	84 0f       	add	r24, r20
 360:	95 1f       	adc	r25, r21
		{
			temp_status=1;
			USART_TransmitString("L%");
		}
		if ((temp_val>=lower_temp)&&(temp_val<=upper_temp))
		{
 362:	2f 5f       	subi	r18, 0xFF	; 255
 364:	23 17       	cp	r18, r19
 366:	10 f3       	brcs	.-60     	; 0x32c <getvalue+0xc>
	}
}



uint16 getvalue(uint8 starting_index){
 368:	08 95       	ret

0000036a <__vector_13>:
	ac_lamp.pin=pin6;
	ac_lamp.logic=high;
	mcal_gpio_pin_direction_intiallize(&ac_lamp);
}


 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	2f 93       	push	r18
 376:	3f 93       	push	r19
 378:	4f 93       	push	r20
 37a:	5f 93       	push	r21
 37c:	6f 93       	push	r22
 37e:	7f 93       	push	r23
 380:	8f 93       	push	r24
 382:	9f 93       	push	r25
 384:	af 93       	push	r26
 386:	bf 93       	push	r27
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
// Interrupt service routine for USART Receive Complete
 390:	f8 94       	cli
/*ISR(USART_RXC_vect) {
 392:	9c b1       	in	r25, 0x0c	; 12
 394:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <receivedData>
	cli();
 398:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <index>
 39c:	e8 2f       	mov	r30, r24
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	e2 55       	subi	r30, 0x52	; 82
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	90 83       	st	Z, r25
	receivedData = UDR;
 3a6:	8f 5f       	subi	r24, 0xFF	; 255
 3a8:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <index>
	recieved_frame[index]=receivedData;
 3ac:	80 31       	cpi	r24, 0x10	; 16
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <__vector_13+0x48>
 3b0:	0e c1       	rjmp	.+540    	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
	index++;
	if (index==16)
 3b2:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <isr_count>
 3b6:	8f 5f       	subi	r24, 0xFF	; 255
 3b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <isr_count>
	{
 3bc:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <recieved_frame>
 3c0:	80 34       	cpi	r24, 0x40	; 64
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <__vector_13+0x5c>
 3c4:	02 c1       	rjmp	.+516    	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
		isr_count++;
		if (recieved_frame[0]=='@')
 3c6:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <recieved_frame+0x1>
 3ca:	8d 34       	cpi	r24, 0x4D	; 77
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <__vector_13+0x66>
 3ce:	74 c0       	rjmp	.+232    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 3d0:	83 35       	cpi	r24, 0x53	; 83
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <__vector_13+0x6c>
 3d4:	cc c0       	rjmp	.+408    	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 3d6:	81 34       	cpi	r24, 0x41	; 65
 3d8:	09 f0       	breq	.+2      	; 0x3dc <__vector_13+0x72>
 3da:	f7 c0       	rjmp	.+494    	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
		{
			switch(recieved_frame[1])
			{
				case 'A':
 3dc:	83 e0       	ldi	r24, 0x03	; 3
 3de:	0e 94 90 01 	call	0x320	; 0x320 <getvalue>
 3e2:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <lower_temp+0x1>
 3e6:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <lower_temp>
				{
 3ea:	87 e0       	ldi	r24, 0x07	; 7
 3ec:	0e 94 90 01 	call	0x320	; 0x320 <getvalue>
 3f0:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <upper_temp+0x1>
 3f4:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <upper_temp>
					lower_temp=getvalue(3);
					upper_temp=getvalue(7);
 3f8:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <temp_val>
 3fc:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <temp_val+0x1>
 400:	82 17       	cp	r24, r18
 402:	93 07       	cpc	r25, r19
 404:	a8 f4       	brcc	.+42     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
					//high
					if(temp_val > upper_temp)
 406:	83 b7       	in	r24, 0x33	; 51
 408:	8f 7e       	andi	r24, 0xEF	; 239
 40a:	83 bf       	out	0x33, r24	; 51
 40c:	83 b7       	in	r24, 0x33	; 51
 40e:	80 62       	ori	r24, 0x20	; 32
 410:	83 bf       	out	0x33, r24	; 51
					{
 412:	88 ec       	ldi	r24, 0xC8	; 200
 414:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <mcal_PWM0_increase_to_value>
						PWM0_CLEAR_ON_UP_COUNTING();
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	8f eb       	ldi	r24, 0xBF	; 191
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 f7 05 	call	0xbee	; 0xbee <mcal_gpio_pin_output_write_logic>
						mcal_PWM0_increase_to_value(200);
 422:	85 e7       	ldi	r24, 0x75	; 117
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
						mcal_gpio_pin_output_write_logic(&ac_lamp,low);
 42a:	82 e0       	ldi	r24, 0x02	; 2
 42c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <temp_status>
						USART_TransmitString("H%");
						temp_status=2;
					}
 430:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <temp_val>
 434:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <temp_val+0x1>
 438:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <lower_temp>
 43c:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <lower_temp+0x1>
 440:	28 17       	cp	r18, r24
 442:	39 07       	cpc	r19, r25
 444:	98 f4       	brcc	.+38     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
					//low
					if(temp_val < lower_temp)
 446:	8c b7       	in	r24, 0x3c	; 60
 448:	88 3c       	cpi	r24, 0xC8	; 200
 44a:	19 f4       	brne	.+6      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
					{
						if(OCR0==200)
 44c:	0e 94 72 06 	call	0xce4	; 0xce4 <mcal_PWM0_decrease_from_value>
 450:	01 c0       	rjmp	.+2      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
						{
							mcal_PWM0_decrease_from_value(200);
 452:	1c be       	out	0x3c, r1	; 60
						}
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	8f eb       	ldi	r24, 0xBF	; 191
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 f7 05 	call	0xbee	; 0xbee <mcal_gpio_pin_output_write_logic>
						else{OCR0=0;}
 45e:	88 e7       	ldi	r24, 0x78	; 120
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
						mcal_gpio_pin_output_write_logic(&ac_lamp,high);
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <temp_status>
						USART_TransmitString("L%");
						temp_status=1;
					}
 46c:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <temp_val>
 470:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <temp_val+0x1>
 474:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <lower_temp>
 478:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <lower_temp+0x1>
 47c:	82 17       	cp	r24, r18
 47e:	93 07       	cpc	r25, r19
 480:	08 f4       	brcc	.+2      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 482:	a3 c0       	rjmp	.+326    	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
 484:	20 91 ab 00 	lds	r18, 0x00AB	; 0x8000ab <upper_temp>
 488:	30 91 ac 00 	lds	r19, 0x00AC	; 0x8000ac <upper_temp+0x1>
 48c:	28 17       	cp	r18, r24
 48e:	39 07       	cpc	r19, r25
 490:	08 f4       	brcc	.+2      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 492:	9b c0       	rjmp	.+310    	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
				
					if ((temp_val>=lower_temp)&&(temp_val<=upper_temp))
 494:	8c b7       	in	r24, 0x3c	; 60
 496:	88 23       	and	r24, r24
 498:	19 f0       	breq	.+6      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
					{
						if (OCR0>0)
 49a:	8c b7       	in	r24, 0x3c	; 60
 49c:	0e 94 72 06 	call	0xce4	; 0xce4 <mcal_PWM0_decrease_from_value>
						{
							mcal_PWM0_decrease_from_value(OCR0);
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	8f eb       	ldi	r24, 0xBF	; 191
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 f7 05 	call	0xbee	; 0xbee <mcal_gpio_pin_output_write_logic>
						}
 4aa:	8b e7       	ldi	r24, 0x7B	; 123
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
						mcal_gpio_pin_output_write_logic(&ac_lamp,low);
 4b2:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <temp_status>
 4b6:	89 c0       	rjmp	.+274    	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
				}
	
				
				
				//Manual
				case 'M':
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	0e 94 90 01 	call	0x320	; 0x320 <getvalue>
 4be:	ec 01       	movw	r28, r24
 4c0:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <lower_temp+0x1>
 4c4:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <lower_temp>
				{
 4c8:	87 e0       	ldi	r24, 0x07	; 7
 4ca:	0e 94 90 01 	call	0x320	; 0x320 <getvalue>
 4ce:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <upper_temp+0x1>
 4d2:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <upper_temp>
					lower_temp=getvalue(3);
 4d6:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <temp_val>
 4da:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <temp_val+0x1>
 4de:	82 17       	cp	r24, r18
 4e0:	93 07       	cpc	r25, r19
 4e2:	40 f4       	brcc	.+16     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
					upper_temp=getvalue(7);
					if(temp_val > upper_temp)
 4e4:	85 e7       	ldi	r24, 0x75	; 117
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
					{
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <temp_status>
 4f2:	17 c0       	rjmp	.+46     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
						USART_TransmitString("H%");
						temp_status=2;
 4f4:	2c 17       	cp	r18, r28
 4f6:	3d 07       	cpc	r19, r29
 4f8:	40 f4       	brcc	.+16     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
					}
					else if(temp_val < lower_temp)
 4fa:	88 e7       	ldi	r24, 0x78	; 120
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
					{
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <temp_status>
 508:	0c c0       	rjmp	.+24     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
						USART_TransmitString("L%");
						temp_status=1;
 50a:	2c 17       	cp	r18, r28
 50c:	3d 07       	cpc	r19, r29
 50e:	48 f0       	brcs	.+18     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 510:	82 17       	cp	r24, r18
 512:	93 07       	cpc	r25, r19
 514:	30 f0       	brcs	.+12     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
					}
					else if ((temp_val>=lower_temp)&&(temp_val<=upper_temp))
 516:	8b e7       	ldi	r24, 0x7B	; 123
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
					{
 51e:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <temp_status>
						USART_TransmitString("N%");
						temp_status=0;
 522:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <recieved_frame+0xa>
 526:	86 34       	cpi	r24, 0x46	; 70
 528:	19 f0       	breq	.+6      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 52a:	88 35       	cpi	r24, 0x58	; 88
 52c:	69 f0       	breq	.+26     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 52e:	0f c0       	rjmp	.+30     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
					}
					switch(recieved_frame[10])
					{
 530:	8b e0       	ldi	r24, 0x0B	; 11
 532:	0e 94 90 01 	call	0x320	; 0x320 <getvalue>
 536:	68 2f       	mov	r22, r24
 538:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <fan_speed>
 53c:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <fan_speed+0x1>
						case'F':
 540:	8c b7       	in	r24, 0x3c	; 60
 542:	0e 94 79 06 	call	0xcf2	; 0xcf2 <mcal_PWM0_start_to_end>
						fan_speed=getvalue(11);
 546:	03 c0       	rjmp	.+6      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
						mcal_PWM0_start_to_end(OCR0,fan_speed);
						break;
 548:	8c b7       	in	r24, 0x3c	; 60
 54a:	0e 94 72 06 	call	0xce4	; 0xce4 <mcal_PWM0_decrease_from_value>
						case'X':
						mcal_PWM0_decrease_from_value(OCR0);
						break;
 54e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <recieved_frame+0xe>
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	31 f4       	brne	.+12     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
					}
					if(recieved_frame[14]=='B'){
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	8f eb       	ldi	r24, 0xBF	; 191
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 f7 05 	call	0xbee	; 0xbee <mcal_gpio_pin_output_write_logic>
 560:	34 c0       	rjmp	.+104    	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
						//bulb is ON
						mcal_gpio_pin_output_write_logic(&ac_lamp,high);
					}
					else
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	8f eb       	ldi	r24, 0xBF	; 191
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 f7 05 	call	0xbee	; 0xbee <mcal_gpio_pin_output_write_logic>
 56c:	2e c0       	rjmp	.+92     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
				}
			

				
				//Status
				case'S':
 56e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <temp_val>
 572:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <temp_val+0x1>
 576:	20 91 ab 00 	lds	r18, 0x00AB	; 0x8000ab <upper_temp>
 57a:	30 91 ac 00 	lds	r19, 0x00AC	; 0x8000ac <upper_temp+0x1>
 57e:	28 17       	cp	r18, r24
 580:	39 07       	cpc	r19, r25
 582:	40 f4       	brcc	.+16     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
				{
					if(temp_val > upper_temp)
 584:	85 e7       	ldi	r24, 0x75	; 117
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
					{
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <temp_status>
 592:	1b c0       	rjmp	.+54     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
						USART_TransmitString("H%");
						temp_status=2;
 594:	40 91 a3 00 	lds	r20, 0x00A3	; 0x8000a3 <lower_temp>
 598:	50 91 a4 00 	lds	r21, 0x00A4	; 0x8000a4 <lower_temp+0x1>
 59c:	84 17       	cp	r24, r20
 59e:	95 07       	cpc	r25, r21
 5a0:	40 f4       	brcc	.+16     	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
					}
					else if(temp_val < lower_temp)
 5a2:	88 e7       	ldi	r24, 0x78	; 120
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
					{
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <temp_status>
 5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
						USART_TransmitString("L%");
						temp_status=1;
 5b2:	84 17       	cp	r24, r20
 5b4:	95 07       	cpc	r25, r21
 5b6:	48 f0       	brcs	.+18     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
 5b8:	28 17       	cp	r18, r24
 5ba:	39 07       	cpc	r19, r25
 5bc:	30 f0       	brcs	.+12     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
					}
					else if((temp_val>=lower_temp)&&(temp_val<=upper_temp))
 5be:	8b e7       	ldi	r24, 0x7B	; 123
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
					{
 5c6:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <temp_status>
						temp_status=0;
					}
					break;
				}
				
			}
 5ca:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <index>
		}
		index=0;
 5ce:	78 94       	sei
	}
 5d0:	ff 91       	pop	r31
 5d2:	ef 91       	pop	r30
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <auto_mode_handle_and_lcd_status_update>:
	sei();
}*/
ISR(USART_RXC_vect)
{
 5f6:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <recieved_frame+0x1>
 5fa:	81 34       	cpi	r24, 0x41	; 65
 5fc:	09 f0       	breq	.+2      	; 0x600 <auto_mode_handle_and_lcd_status_update+0xa>
 5fe:	6e c0       	rjmp	.+220    	; 0x6dc <auto_mode_handle_and_lcd_status_update+0xe6>
		PORTA=0xff;
 600:	83 e0       	ldi	r24, 0x03	; 3
 602:	0e 94 90 01 	call	0x320	; 0x320 <getvalue>
 606:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <lower_temp+0x1>
 60a:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <lower_temp>
		
 60e:	87 e0       	ldi	r24, 0x07	; 7
 610:	0e 94 90 01 	call	0x320	; 0x320 <getvalue>
 614:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <upper_temp+0x1>
 618:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <upper_temp>
	//rec=UDR;
	
 61c:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <temp_val>
 620:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <temp_val+0x1>
 624:	82 17       	cp	r24, r18
 626:	93 07       	cpc	r25, r19
 628:	a8 f4       	brcc	.+42     	; 0x654 <auto_mode_handle_and_lcd_status_update+0x5e>
	//LCD_displayStringRowColumn(0,index,rec);

 62a:	83 b7       	in	r24, 0x33	; 51
 62c:	8f 7e       	andi	r24, 0xEF	; 239
 62e:	83 bf       	out	0x33, r24	; 51
 630:	83 b7       	in	r24, 0x33	; 51
 632:	80 62       	ori	r24, 0x20	; 32
 634:	83 bf       	out	0x33, r24	; 51
	//index++;
 636:	88 ec       	ldi	r24, 0xC8	; 200
 638:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <mcal_PWM0_increase_to_value>
}
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	8f eb       	ldi	r24, 0xBF	; 191
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 f7 05 	call	0xbee	; 0xbee <mcal_gpio_pin_output_write_logic>

 646:	85 e7       	ldi	r24, 0x75	; 117
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
void auto_mode_handle_and_lcd_status_update()
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <temp_status>
{
	if(recieved_frame[1]=='A')
	{lower_temp=getvalue(3);
 654:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <temp_val>
 658:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <temp_val+0x1>
 65c:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <lower_temp>
 660:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <lower_temp+0x1>
 664:	28 17       	cp	r18, r24
 666:	39 07       	cpc	r19, r25
 668:	98 f4       	brcc	.+38     	; 0x690 <auto_mode_handle_and_lcd_status_update+0x9a>
	upper_temp=getvalue(7);
	//high
 66a:	8c b7       	in	r24, 0x3c	; 60
 66c:	88 3c       	cpi	r24, 0xC8	; 200
 66e:	19 f4       	brne	.+6      	; 0x676 <auto_mode_handle_and_lcd_status_update+0x80>
	if(temp_val > upper_temp)
	{
 670:	0e 94 72 06 	call	0xce4	; 0xce4 <mcal_PWM0_decrease_from_value>
 674:	01 c0       	rjmp	.+2      	; 0x678 <auto_mode_handle_and_lcd_status_update+0x82>
		PWM0_CLEAR_ON_UP_COUNTING();
		mcal_PWM0_increase_to_value(200);
 676:	1c be       	out	0x3c, r1	; 60
		mcal_gpio_pin_output_write_logic(&ac_lamp,low);
 678:	61 e0       	ldi	r22, 0x01	; 1
 67a:	8f eb       	ldi	r24, 0xBF	; 191
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 f7 05 	call	0xbee	; 0xbee <mcal_gpio_pin_output_write_logic>
		USART_TransmitString("H%");
 682:	88 e7       	ldi	r24, 0x78	; 120
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
		temp_status=2;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <temp_status>
	}
	//low
	if(temp_val < lower_temp)
 690:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <temp_val>
 694:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <temp_val+0x1>
 698:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <lower_temp>
 69c:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <lower_temp+0x1>
 6a0:	82 17       	cp	r24, r18
 6a2:	93 07       	cpc	r25, r19
 6a4:	08 f4       	brcc	.+2      	; 0x6a8 <auto_mode_handle_and_lcd_status_update+0xb2>
 6a6:	58 c0       	rjmp	.+176    	; 0x758 <auto_mode_handle_and_lcd_status_update+0x162>
 6a8:	20 91 ab 00 	lds	r18, 0x00AB	; 0x8000ab <upper_temp>
 6ac:	30 91 ac 00 	lds	r19, 0x00AC	; 0x8000ac <upper_temp+0x1>
 6b0:	28 17       	cp	r18, r24
 6b2:	39 07       	cpc	r19, r25
 6b4:	08 f4       	brcc	.+2      	; 0x6b8 <auto_mode_handle_and_lcd_status_update+0xc2>
 6b6:	50 c0       	rjmp	.+160    	; 0x758 <auto_mode_handle_and_lcd_status_update+0x162>
	{
		if(OCR0==200)
 6b8:	8c b7       	in	r24, 0x3c	; 60
 6ba:	88 23       	and	r24, r24
 6bc:	19 f0       	breq	.+6      	; 0x6c4 <auto_mode_handle_and_lcd_status_update+0xce>
		{
			mcal_PWM0_decrease_from_value(200);
 6be:	8c b7       	in	r24, 0x3c	; 60
 6c0:	0e 94 72 06 	call	0xce4	; 0xce4 <mcal_PWM0_decrease_from_value>
		}
		else{OCR0=0;}
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	8f eb       	ldi	r24, 0xBF	; 191
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 f7 05 	call	0xbee	; 0xbee <mcal_gpio_pin_output_write_logic>
		mcal_gpio_pin_output_write_logic(&ac_lamp,high);
 6ce:	8b e7       	ldi	r24, 0x7B	; 123
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
		USART_TransmitString("L%");
 6d6:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <temp_status>
 6da:	08 95       	ret
		temp_status=1;
	}
	
 6dc:	8d 34       	cpi	r24, 0x4D	; 77
 6de:	e1 f5       	brne	.+120    	; 0x758 <auto_mode_handle_and_lcd_status_update+0x162>
	if ((temp_val>=lower_temp)&&(temp_val<=upper_temp))
	{
 6e0:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <temp_val>
 6e4:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <temp_val+0x1>
 6e8:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <upper_temp>
 6ec:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <upper_temp+0x1>
 6f0:	82 17       	cp	r24, r18
 6f2:	93 07       	cpc	r25, r19
 6f4:	38 f4       	brcc	.+14     	; 0x704 <auto_mode_handle_and_lcd_status_update+0x10e>
		if (OCR0>0)
		{
 6f6:	82 e0       	ldi	r24, 0x02	; 2
 6f8:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <temp_status>
			mcal_PWM0_decrease_from_value(OCR0);
 6fc:	85 e7       	ldi	r24, 0x75	; 117
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
		}
		mcal_gpio_pin_output_write_logic(&ac_lamp,low);
 704:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <temp_val>
 708:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <temp_val+0x1>
 70c:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <lower_temp>
 710:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <lower_temp+0x1>
 714:	28 17       	cp	r18, r24
 716:	39 07       	cpc	r19, r25
 718:	38 f4       	brcc	.+14     	; 0x728 <auto_mode_handle_and_lcd_status_update+0x132>
		USART_TransmitString("N%");
		temp_status=0;
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <temp_status>
	}
 720:	88 e7       	ldi	r24, 0x78	; 120
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
	}
	else if(recieved_frame[1]=='M')
 728:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <temp_val>
 72c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <temp_val+0x1>
 730:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <lower_temp>
 734:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <lower_temp+0x1>
 738:	82 17       	cp	r24, r18
 73a:	93 07       	cpc	r25, r19
 73c:	68 f0       	brcs	.+26     	; 0x758 <auto_mode_handle_and_lcd_status_update+0x162>
 73e:	20 91 ab 00 	lds	r18, 0x00AB	; 0x8000ab <upper_temp>
 742:	30 91 ac 00 	lds	r19, 0x00AC	; 0x8000ac <upper_temp+0x1>
 746:	28 17       	cp	r18, r24
 748:	39 07       	cpc	r19, r25
 74a:	30 f0       	brcs	.+12     	; 0x758 <auto_mode_handle_and_lcd_status_update+0x162>
	{
		if(temp_val > upper_temp)
 74c:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <temp_status>
		{
 750:	8b e7       	ldi	r24, 0x7B	; 123
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 fd 06 	call	0xdfa	; 0xdfa <USART_TransmitString>
 758:	08 95       	ret

0000075a <temp_status_display>:

uint16 getvalue(uint8 starting_index){
	uint8 end_index=starting_index+3;
	uint16 value=0;
	for(uint8 i=starting_index;i<end_index;i++)
	{
 75a:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <isr_count>
 75e:	88 23       	and	r24, r24
 760:	01 f1       	breq	.+64     	; 0x7a2 <temp_status_display+0x48>
		value+=(recieved_frame[i]-48);
		if(i<end_index-1)
 762:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <temp_val>
 766:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <temp_val+0x1>
 76a:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <upper_temp>
 76e:	50 91 ac 00 	lds	r21, 0x00AC	; 0x8000ac <upper_temp+0x1>
 772:	48 17       	cp	r20, r24
 774:	59 07       	cpc	r21, r25
 776:	18 f4       	brcc	.+6      	; 0x77e <temp_status_display+0x24>
		{
			value*=10;
 778:	22 e0       	ldi	r18, 0x02	; 2
 77a:	20 93 c3 00 	sts	0x00C3, r18	; 0x8000c3 <temp_status>
		}
	}
 77e:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <lower_temp>
 782:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <lower_temp+0x1>
 786:	82 17       	cp	r24, r18
 788:	93 07       	cpc	r25, r19
 78a:	18 f4       	brcc	.+6      	; 0x792 <temp_status_display+0x38>
	return value;
}
 78c:	61 e0       	ldi	r22, 0x01	; 1
 78e:	60 93 c3 00 	sts	0x00C3, r22	; 0x8000c3 <temp_status>

void temp_status_display()
 792:	82 17       	cp	r24, r18
 794:	93 07       	cpc	r25, r19
 796:	28 f0       	brcs	.+10     	; 0x7a2 <temp_status_display+0x48>
 798:	48 17       	cp	r20, r24
 79a:	59 07       	cpc	r21, r25
 79c:	10 f0       	brcs	.+4      	; 0x7a2 <temp_status_display+0x48>
{
	if(isr_count>0)
 79e:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <temp_status>
	{
		if(temp_val > upper_temp)
		{
 7a2:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <temp_status>
 7a6:	81 30       	cpi	r24, 0x01	; 1
 7a8:	69 f0       	breq	.+26     	; 0x7c4 <temp_status_display+0x6a>
 7aa:	18 f0       	brcs	.+6      	; 0x7b2 <temp_status_display+0x58>
 7ac:	82 30       	cpi	r24, 0x02	; 2
 7ae:	99 f0       	breq	.+38     	; 0x7d6 <temp_status_display+0x7c>
 7b0:	08 95       	ret
			temp_status=2;
		}
		if(temp_val < lower_temp)
 7b2:	4e e7       	ldi	r20, 0x7E	; 126
 7b4:	50 e0       	ldi	r21, 0x00	; 0
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_displayStringRowColumn>
		{
 7c2:	08 95       	ret
			temp_status=1;
		}
 7c4:	45 e8       	ldi	r20, 0x85	; 133
 7c6:	50 e0       	ldi	r21, 0x00	; 0
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	70 e0       	ldi	r23, 0x00	; 0
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_displayStringRowColumn>
		if ((temp_val>=lower_temp)&&(temp_val<=upper_temp))
 7d4:	08 95       	ret
		{
			temp_status=0;
 7d6:	4c e8       	ldi	r20, 0x8C	; 140
 7d8:	50 e0       	ldi	r21, 0x00	; 0
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_displayStringRowColumn>
 7e6:	08 95       	ret

000007e8 <temp_to_string>:
		}
	}
	switch(temp_status)
	{
		case 0:
		LCD_displayStringRowColumn(0,0,"normal");
 7e8:	ff 92       	push	r15
 7ea:	0f 93       	push	r16
 7ec:	1f 93       	push	r17
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	8c 01       	movw	r16, r24
 7f4:	eb 01       	movw	r28, r22
		break;
		case 2:
		LCD_displayStringRowColumn(0,0,"hot   ");
		break;
	}
}
 7f6:	f1 2c       	mov	r15, r1
 7f8:	2d c0       	rjmp	.+90     	; 0x854 <__DATA_REGION_LENGTH__+0x54>

void temp_to_string(uint8 str[], uint16 temp_int)
 7fa:	9e 01       	movw	r18, r28
 7fc:	ad ec       	ldi	r26, 0xCD	; 205
 7fe:	bc ec       	ldi	r27, 0xCC	; 204
 800:	0e 94 10 07 	call	0xe20	; 0xe20 <__umulhisi3>
 804:	ac 01       	movw	r20, r24
 806:	56 95       	lsr	r21
 808:	47 95       	ror	r20
 80a:	56 95       	lsr	r21
 80c:	47 95       	ror	r20
 80e:	56 95       	lsr	r21
 810:	47 95       	ror	r20
 812:	ca 01       	movw	r24, r20
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	44 0f       	add	r20, r20
 81a:	55 1f       	adc	r21, r21
 81c:	44 0f       	add	r20, r20
 81e:	55 1f       	adc	r21, r21
 820:	44 0f       	add	r20, r20
 822:	55 1f       	adc	r21, r21
 824:	48 0f       	add	r20, r24
 826:	59 1f       	adc	r21, r25
 828:	ce 01       	movw	r24, r28
 82a:	84 1b       	sub	r24, r20
 82c:	95 0b       	sbc	r25, r21
 82e:	ac 01       	movw	r20, r24
{
 830:	0e 94 10 07 	call	0xe20	; 0xe20 <__umulhisi3>
 834:	ec 01       	movw	r28, r24
 836:	d6 95       	lsr	r29
 838:	c7 95       	ror	r28
 83a:	d6 95       	lsr	r29
 83c:	c7 95       	ror	r28
 83e:	d6 95       	lsr	r29
 840:	c7 95       	ror	r28
	 uint8 i, rem, len = 0, n;
 842:	e2 e0       	ldi	r30, 0x02	; 2
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	ef 19       	sub	r30, r15
 848:	f1 09       	sbc	r31, r1
 84a:	e0 0f       	add	r30, r16
 84c:	f1 1f       	adc	r31, r17
 84e:	40 5d       	subi	r20, 0xD0	; 208
 850:	40 83       	st	Z, r20
		break;
		case 2:
		LCD_displayStringRowColumn(0,0,"hot   ");
		break;
	}
}
 852:	f3 94       	inc	r15
 854:	92 e0       	ldi	r25, 0x02	; 2
 856:	9f 15       	cp	r25, r15
 858:	80 f6       	brcc	.-96     	; 0x7fa <temp_to_string+0x12>

void temp_to_string(uint8 str[], uint16 temp_int)
{
	 uint8 i, rem, len = 0, n;
	 
	 n = temp_int;
 85a:	f8 01       	movw	r30, r16
 85c:	13 82       	std	Z+3, r1	; 0x03
	/* while (n != 0)
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	ff 90       	pop	r15
 868:	08 95       	ret

0000086a <main>:


int main(void)
{
	DDRA=0xff;
	intiallize_temp_sensor();
 86a:	0e 94 3a 01 	call	0x274	; 0x274 <intiallize_temp_sensor>
	intiallize_DC_fan();
 86e:	0e 94 4e 01 	call	0x29c	; 0x29c <intiallize_DC_fan>
	intiallize_ac_lamp();
 872:	0e 94 81 01 	call	0x302	; 0x302 <intiallize_ac_lamp>
	LCD_init();
 876:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_init>
	// Set baud rate to 9600 bps
	//USART_Init(51);
 87a:	83 e3       	ldi	r24, 0x33	; 51
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 f2 06 	call	0xde4	; 0xde4 <USART_Init>
 UCSRB = (1<<RXEN)|(1<<RXCIE); //enable receive and RXC int.
 UCSRC = (1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
 UBRRL = 51;
 882:	78 94       	sei
	// Enable global interrupts
	sei();

    while (1) 
 884:	0e 94 ad 03 	call	0x75a	; 0x75a <temp_status_display>
    {		
 888:	60 e0       	ldi	r22, 0x00	; 0
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 18 01 	call	0x230	; 0x230 <LCD_goToRowColumn>
		//temp_status_display();
 894:	65 ea       	ldi	r22, 0xA5	; 165
 896:	70 e0       	ldi	r23, 0x00	; 0
 898:	80 ec       	ldi	r24, 0xC0	; 192
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	0e 94 ac 05 	call	0xb58	; 0xb58 <mcal_adc_read_poilling_value>
		LCD_goToRowColumn(1,0);
 8a0:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <temp_val>
 8a4:	70 91 a6 00 	lds	r23, 0x00A6	; 0x8000a6 <temp_val+0x1>
 8a8:	80 e6       	ldi	r24, 0x60	; 96
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <temp_to_string>
		mcal_adc_read_poilling_value(&temp_sensor,&temp_val);
 8b0:	43 e9       	ldi	r20, 0x93	; 147
 8b2:	50 e0       	ldi	r21, 0x00	; 0
 8b4:	60 e0       	ldi	r22, 0x00	; 0
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_displayStringRowColumn>
		temp_to_string(temp_str,temp_val);
 8c0:	40 e6       	ldi	r20, 0x60	; 96
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	6c e0       	ldi	r22, 0x0C	; 12
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"temperature=");
 8d0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <auto_mode_handle_and_lcd_status_update>
 8d4:	d7 cf       	rjmp	.-82     	; 0x884 <main+0x1a>

000008d6 <mcal_adc_intiallize>:
 8d6:	dc 01       	movw	r26, r24
 8d8:	89 2b       	or	r24, r25
 8da:	09 f4       	brne	.+2      	; 0x8de <mcal_adc_intiallize+0x8>
 8dc:	0a c1       	rjmp	.+532    	; 0xaf2 <mcal_adc_intiallize+0x21c>
 8de:	86 b1       	in	r24, 0x06	; 6
 8e0:	80 68       	ori	r24, 0x80	; 128
 8e2:	86 b9       	out	0x06, r24	; 6
 8e4:	11 96       	adiw	r26, 0x01	; 1
 8e6:	8c 91       	ld	r24, X
 8e8:	11 97       	sbiw	r26, 0x01	; 1
 8ea:	83 70       	andi	r24, 0x03	; 3
 8ec:	81 30       	cpi	r24, 0x01	; 1
 8ee:	59 f0       	breq	.+22     	; 0x906 <mcal_adc_intiallize+0x30>
 8f0:	18 f0       	brcs	.+6      	; 0x8f8 <mcal_adc_intiallize+0x22>
 8f2:	82 30       	cpi	r24, 0x02	; 2
 8f4:	79 f0       	breq	.+30     	; 0x914 <mcal_adc_intiallize+0x3e>
 8f6:	15 c0       	rjmp	.+42     	; 0x922 <mcal_adc_intiallize+0x4c>
 8f8:	87 b1       	in	r24, 0x07	; 7
 8fa:	8f 7b       	andi	r24, 0xBF	; 191
 8fc:	87 b9       	out	0x07, r24	; 7
 8fe:	87 b1       	in	r24, 0x07	; 7
 900:	8f 77       	andi	r24, 0x7F	; 127
 902:	87 b9       	out	0x07, r24	; 7
 904:	14 c0       	rjmp	.+40     	; 0x92e <mcal_adc_intiallize+0x58>
 906:	87 b1       	in	r24, 0x07	; 7
 908:	80 64       	ori	r24, 0x40	; 64
 90a:	87 b9       	out	0x07, r24	; 7
 90c:	87 b1       	in	r24, 0x07	; 7
 90e:	8f 77       	andi	r24, 0x7F	; 127
 910:	87 b9       	out	0x07, r24	; 7
 912:	0d c0       	rjmp	.+26     	; 0x92e <mcal_adc_intiallize+0x58>
 914:	87 b1       	in	r24, 0x07	; 7
 916:	80 64       	ori	r24, 0x40	; 64
 918:	87 b9       	out	0x07, r24	; 7
 91a:	87 b1       	in	r24, 0x07	; 7
 91c:	80 68       	ori	r24, 0x80	; 128
 91e:	87 b9       	out	0x07, r24	; 7
 920:	06 c0       	rjmp	.+12     	; 0x92e <mcal_adc_intiallize+0x58>
 922:	87 b1       	in	r24, 0x07	; 7
 924:	8f 7b       	andi	r24, 0xBF	; 191
 926:	87 b9       	out	0x07, r24	; 7
 928:	87 b1       	in	r24, 0x07	; 7
 92a:	8f 77       	andi	r24, 0x7F	; 127
 92c:	87 b9       	out	0x07, r24	; 7
 92e:	8c 91       	ld	r24, X
 930:	98 2f       	mov	r25, r24
 932:	91 70       	andi	r25, 0x01	; 1
 934:	80 ff       	sbrs	r24, 0
 936:	03 c0       	rjmp	.+6      	; 0x93e <mcal_adc_intiallize+0x68>
 938:	91 30       	cpi	r25, 0x01	; 1
 93a:	29 f0       	breq	.+10     	; 0x946 <mcal_adc_intiallize+0x70>
 93c:	08 c0       	rjmp	.+16     	; 0x94e <mcal_adc_intiallize+0x78>
 93e:	87 b1       	in	r24, 0x07	; 7
 940:	8f 7d       	andi	r24, 0xDF	; 223
 942:	87 b9       	out	0x07, r24	; 7
 944:	07 c0       	rjmp	.+14     	; 0x954 <mcal_adc_intiallize+0x7e>
 946:	87 b1       	in	r24, 0x07	; 7
 948:	80 62       	ori	r24, 0x20	; 32
 94a:	87 b9       	out	0x07, r24	; 7
 94c:	03 c0       	rjmp	.+6      	; 0x954 <mcal_adc_intiallize+0x7e>
 94e:	87 b1       	in	r24, 0x07	; 7
 950:	80 62       	ori	r24, 0x20	; 32
 952:	87 b9       	out	0x07, r24	; 7
 954:	4c 91       	ld	r20, X
 956:	e4 2f       	mov	r30, r20
 958:	e6 95       	lsr	r30
 95a:	ef 70       	andi	r30, 0x0F	; 15
 95c:	4e 2f       	mov	r20, r30
 95e:	50 e0       	ldi	r21, 0x00	; 0
 960:	48 30       	cpi	r20, 0x08	; 8
 962:	51 05       	cpc	r21, r1
 964:	08 f0       	brcs	.+2      	; 0x968 <mcal_adc_intiallize+0x92>
 966:	55 c0       	rjmp	.+170    	; 0xa12 <mcal_adc_intiallize+0x13c>
 968:	fa 01       	movw	r30, r20
 96a:	e6 5d       	subi	r30, 0xD6	; 214
 96c:	ff 4f       	sbci	r31, 0xFF	; 255
 96e:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__tablejump2__>
 972:	87 b1       	in	r24, 0x07	; 7
 974:	8e 7f       	andi	r24, 0xFE	; 254
 976:	87 b9       	out	0x07, r24	; 7
 978:	87 b1       	in	r24, 0x07	; 7
 97a:	8d 7f       	andi	r24, 0xFD	; 253
 97c:	87 b9       	out	0x07, r24	; 7
 97e:	87 b1       	in	r24, 0x07	; 7
 980:	8b 7f       	andi	r24, 0xFB	; 251
 982:	87 b9       	out	0x07, r24	; 7
 984:	4f c0       	rjmp	.+158    	; 0xa24 <mcal_adc_intiallize+0x14e>
 986:	87 b1       	in	r24, 0x07	; 7
 988:	81 60       	ori	r24, 0x01	; 1
 98a:	87 b9       	out	0x07, r24	; 7
 98c:	87 b1       	in	r24, 0x07	; 7
 98e:	8d 7f       	andi	r24, 0xFD	; 253
 990:	87 b9       	out	0x07, r24	; 7
 992:	87 b1       	in	r24, 0x07	; 7
 994:	8b 7f       	andi	r24, 0xFB	; 251
 996:	87 b9       	out	0x07, r24	; 7
 998:	45 c0       	rjmp	.+138    	; 0xa24 <mcal_adc_intiallize+0x14e>
 99a:	87 b1       	in	r24, 0x07	; 7
 99c:	8e 7f       	andi	r24, 0xFE	; 254
 99e:	87 b9       	out	0x07, r24	; 7
 9a0:	87 b1       	in	r24, 0x07	; 7
 9a2:	82 60       	ori	r24, 0x02	; 2
 9a4:	87 b9       	out	0x07, r24	; 7
 9a6:	87 b1       	in	r24, 0x07	; 7
 9a8:	8b 7f       	andi	r24, 0xFB	; 251
 9aa:	87 b9       	out	0x07, r24	; 7
 9ac:	3b c0       	rjmp	.+118    	; 0xa24 <mcal_adc_intiallize+0x14e>
 9ae:	87 b1       	in	r24, 0x07	; 7
 9b0:	81 60       	ori	r24, 0x01	; 1
 9b2:	87 b9       	out	0x07, r24	; 7
 9b4:	87 b1       	in	r24, 0x07	; 7
 9b6:	82 60       	ori	r24, 0x02	; 2
 9b8:	87 b9       	out	0x07, r24	; 7
 9ba:	87 b1       	in	r24, 0x07	; 7
 9bc:	8b 7f       	andi	r24, 0xFB	; 251
 9be:	87 b9       	out	0x07, r24	; 7
 9c0:	31 c0       	rjmp	.+98     	; 0xa24 <mcal_adc_intiallize+0x14e>
 9c2:	87 b1       	in	r24, 0x07	; 7
 9c4:	8e 7f       	andi	r24, 0xFE	; 254
 9c6:	87 b9       	out	0x07, r24	; 7
 9c8:	87 b1       	in	r24, 0x07	; 7
 9ca:	8d 7f       	andi	r24, 0xFD	; 253
 9cc:	87 b9       	out	0x07, r24	; 7
 9ce:	87 b1       	in	r24, 0x07	; 7
 9d0:	84 60       	ori	r24, 0x04	; 4
 9d2:	87 b9       	out	0x07, r24	; 7
 9d4:	27 c0       	rjmp	.+78     	; 0xa24 <mcal_adc_intiallize+0x14e>
 9d6:	87 b1       	in	r24, 0x07	; 7
 9d8:	81 60       	ori	r24, 0x01	; 1
 9da:	87 b9       	out	0x07, r24	; 7
 9dc:	87 b1       	in	r24, 0x07	; 7
 9de:	8d 7f       	andi	r24, 0xFD	; 253
 9e0:	87 b9       	out	0x07, r24	; 7
 9e2:	87 b1       	in	r24, 0x07	; 7
 9e4:	84 60       	ori	r24, 0x04	; 4
 9e6:	87 b9       	out	0x07, r24	; 7
 9e8:	1d c0       	rjmp	.+58     	; 0xa24 <mcal_adc_intiallize+0x14e>
 9ea:	87 b1       	in	r24, 0x07	; 7
 9ec:	81 60       	ori	r24, 0x01	; 1
 9ee:	87 b9       	out	0x07, r24	; 7
 9f0:	87 b1       	in	r24, 0x07	; 7
 9f2:	82 60       	ori	r24, 0x02	; 2
 9f4:	87 b9       	out	0x07, r24	; 7
 9f6:	87 b1       	in	r24, 0x07	; 7
 9f8:	8b 7f       	andi	r24, 0xFB	; 251
 9fa:	87 b9       	out	0x07, r24	; 7
 9fc:	13 c0       	rjmp	.+38     	; 0xa24 <mcal_adc_intiallize+0x14e>
 9fe:	87 b1       	in	r24, 0x07	; 7
 a00:	81 60       	ori	r24, 0x01	; 1
 a02:	87 b9       	out	0x07, r24	; 7
 a04:	87 b1       	in	r24, 0x07	; 7
 a06:	82 60       	ori	r24, 0x02	; 2
 a08:	87 b9       	out	0x07, r24	; 7
 a0a:	87 b1       	in	r24, 0x07	; 7
 a0c:	84 60       	ori	r24, 0x04	; 4
 a0e:	87 b9       	out	0x07, r24	; 7
 a10:	09 c0       	rjmp	.+18     	; 0xa24 <mcal_adc_intiallize+0x14e>
 a12:	87 b1       	in	r24, 0x07	; 7
 a14:	8e 7f       	andi	r24, 0xFE	; 254
 a16:	87 b9       	out	0x07, r24	; 7
 a18:	87 b1       	in	r24, 0x07	; 7
 a1a:	8d 7f       	andi	r24, 0xFD	; 253
 a1c:	87 b9       	out	0x07, r24	; 7
 a1e:	87 b1       	in	r24, 0x07	; 7
 a20:	8b 7f       	andi	r24, 0xFB	; 251
 a22:	87 b9       	out	0x07, r24	; 7
 a24:	8c 91       	ld	r24, X
 a26:	e8 2f       	mov	r30, r24
 a28:	e2 95       	swap	r30
 a2a:	e6 95       	lsr	r30
 a2c:	e7 70       	andi	r30, 0x07	; 7
 a2e:	8e 2f       	mov	r24, r30
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	87 30       	cpi	r24, 0x07	; 7
 a34:	91 05       	cpc	r25, r1
 a36:	08 f0       	brcs	.+2      	; 0xa3a <mcal_adc_intiallize+0x164>
 a38:	51 c0       	rjmp	.+162    	; 0xadc <mcal_adc_intiallize+0x206>
 a3a:	fc 01       	movw	r30, r24
 a3c:	ee 5c       	subi	r30, 0xCE	; 206
 a3e:	ff 4f       	sbci	r31, 0xFF	; 255
 a40:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__tablejump2__>
 a44:	86 b1       	in	r24, 0x06	; 6
 a46:	8e 7f       	andi	r24, 0xFE	; 254
 a48:	86 b9       	out	0x06, r24	; 6
 a4a:	86 b1       	in	r24, 0x06	; 6
 a4c:	8d 7f       	andi	r24, 0xFD	; 253
 a4e:	86 b9       	out	0x06, r24	; 6
 a50:	86 b1       	in	r24, 0x06	; 6
 a52:	8b 7f       	andi	r24, 0xFB	; 251
 a54:	86 b9       	out	0x06, r24	; 6
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	08 95       	ret
 a5a:	86 b1       	in	r24, 0x06	; 6
 a5c:	8e 7f       	andi	r24, 0xFE	; 254
 a5e:	86 b9       	out	0x06, r24	; 6
 a60:	86 b1       	in	r24, 0x06	; 6
 a62:	82 60       	ori	r24, 0x02	; 2
 a64:	86 b9       	out	0x06, r24	; 6
 a66:	86 b1       	in	r24, 0x06	; 6
 a68:	8b 7f       	andi	r24, 0xFB	; 251
 a6a:	86 b9       	out	0x06, r24	; 6
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	08 95       	ret
 a70:	86 b1       	in	r24, 0x06	; 6
 a72:	81 60       	ori	r24, 0x01	; 1
 a74:	86 b9       	out	0x06, r24	; 6
 a76:	86 b1       	in	r24, 0x06	; 6
 a78:	82 60       	ori	r24, 0x02	; 2
 a7a:	86 b9       	out	0x06, r24	; 6
 a7c:	86 b1       	in	r24, 0x06	; 6
 a7e:	86 b9       	out	0x06, r24	; 6
 a80:	81 e0       	ldi	r24, 0x01	; 1
 a82:	08 95       	ret
 a84:	86 b1       	in	r24, 0x06	; 6
 a86:	8e 7f       	andi	r24, 0xFE	; 254
 a88:	86 b9       	out	0x06, r24	; 6
 a8a:	86 b1       	in	r24, 0x06	; 6
 a8c:	8d 7f       	andi	r24, 0xFD	; 253
 a8e:	86 b9       	out	0x06, r24	; 6
 a90:	86 b1       	in	r24, 0x06	; 6
 a92:	84 60       	ori	r24, 0x04	; 4
 a94:	86 b9       	out	0x06, r24	; 6
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	08 95       	ret
 a9a:	86 b1       	in	r24, 0x06	; 6
 a9c:	81 60       	ori	r24, 0x01	; 1
 a9e:	86 b9       	out	0x06, r24	; 6
 aa0:	86 b1       	in	r24, 0x06	; 6
 aa2:	8d 7f       	andi	r24, 0xFD	; 253
 aa4:	86 b9       	out	0x06, r24	; 6
 aa6:	86 b1       	in	r24, 0x06	; 6
 aa8:	84 60       	ori	r24, 0x04	; 4
 aaa:	86 b9       	out	0x06, r24	; 6
 aac:	81 e0       	ldi	r24, 0x01	; 1
 aae:	08 95       	ret
 ab0:	86 b1       	in	r24, 0x06	; 6
 ab2:	8e 7f       	andi	r24, 0xFE	; 254
 ab4:	86 b9       	out	0x06, r24	; 6
 ab6:	86 b1       	in	r24, 0x06	; 6
 ab8:	82 60       	ori	r24, 0x02	; 2
 aba:	86 b9       	out	0x06, r24	; 6
 abc:	86 b1       	in	r24, 0x06	; 6
 abe:	84 60       	ori	r24, 0x04	; 4
 ac0:	86 b9       	out	0x06, r24	; 6
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	08 95       	ret
 ac6:	86 b1       	in	r24, 0x06	; 6
 ac8:	81 60       	ori	r24, 0x01	; 1
 aca:	86 b9       	out	0x06, r24	; 6
 acc:	86 b1       	in	r24, 0x06	; 6
 ace:	82 60       	ori	r24, 0x02	; 2
 ad0:	86 b9       	out	0x06, r24	; 6
 ad2:	86 b1       	in	r24, 0x06	; 6
 ad4:	84 60       	ori	r24, 0x04	; 4
 ad6:	86 b9       	out	0x06, r24	; 6
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	08 95       	ret
 adc:	86 b1       	in	r24, 0x06	; 6
 ade:	8e 7f       	andi	r24, 0xFE	; 254
 ae0:	86 b9       	out	0x06, r24	; 6
 ae2:	86 b1       	in	r24, 0x06	; 6
 ae4:	8d 7f       	andi	r24, 0xFD	; 253
 ae6:	86 b9       	out	0x06, r24	; 6
 ae8:	86 b1       	in	r24, 0x06	; 6
 aea:	8b 7f       	andi	r24, 0xFB	; 251
 aec:	86 b9       	out	0x06, r24	; 6
 aee:	81 e0       	ldi	r24, 0x01	; 1
 af0:	08 95       	ret
 af2:	80 e0       	ldi	r24, 0x00	; 0
 af4:	08 95       	ret

00000af6 <mcal_adc_read>:
 af6:	00 97       	sbiw	r24, 0x00	; 0
 af8:	59 f1       	breq	.+86     	; 0xb50 <mcal_adc_read+0x5a>
 afa:	61 15       	cp	r22, r1
 afc:	71 05       	cpc	r23, r1
 afe:	51 f1       	breq	.+84     	; 0xb54 <mcal_adc_read+0x5e>
 b00:	fc 01       	movw	r30, r24
 b02:	80 81       	ld	r24, Z
 b04:	98 2f       	mov	r25, r24
 b06:	91 70       	andi	r25, 0x01	; 1
 b08:	80 ff       	sbrs	r24, 0
 b0a:	03 c0       	rjmp	.+6      	; 0xb12 <mcal_adc_read+0x1c>
 b0c:	91 30       	cpi	r25, 0x01	; 1
 b0e:	59 f0       	breq	.+22     	; 0xb26 <mcal_adc_read+0x30>
 b10:	1a c0       	rjmp	.+52     	; 0xb46 <mcal_adc_read+0x50>
 b12:	84 b1       	in	r24, 0x04	; 4
 b14:	95 b1       	in	r25, 0x05	; 5
 b16:	96 95       	lsr	r25
 b18:	87 95       	ror	r24
 b1a:	02 97       	sbiw	r24, 0x02	; 2
 b1c:	fb 01       	movw	r30, r22
 b1e:	91 83       	std	Z+1, r25	; 0x01
 b20:	80 83       	st	Z, r24
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	08 95       	ret
 b26:	84 b1       	in	r24, 0x04	; 4
 b28:	95 b1       	in	r25, 0x05	; 5
 b2a:	00 24       	eor	r0, r0
 b2c:	88 0f       	add	r24, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	00 1c       	adc	r0, r0
 b32:	88 0f       	add	r24, r24
 b34:	99 1f       	adc	r25, r25
 b36:	00 1c       	adc	r0, r0
 b38:	89 2f       	mov	r24, r25
 b3a:	90 2d       	mov	r25, r0
 b3c:	fb 01       	movw	r30, r22
 b3e:	91 83       	std	Z+1, r25	; 0x01
 b40:	80 83       	st	Z, r24
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	08 95       	ret
 b46:	87 b1       	in	r24, 0x07	; 7
 b48:	8f 7d       	andi	r24, 0xDF	; 223
 b4a:	87 b9       	out	0x07, r24	; 7
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	08 95       	ret
 b50:	80 e0       	ldi	r24, 0x00	; 0
 b52:	08 95       	ret
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	08 95       	ret

00000b58 <mcal_adc_read_poilling_value>:
 b58:	00 97       	sbiw	r24, 0x00	; 0
 b5a:	69 f0       	breq	.+26     	; 0xb76 <mcal_adc_read_poilling_value+0x1e>
 b5c:	61 15       	cp	r22, r1
 b5e:	71 05       	cpc	r23, r1
 b60:	61 f0       	breq	.+24     	; 0xb7a <mcal_adc_read_poilling_value+0x22>
 b62:	26 b1       	in	r18, 0x06	; 6
 b64:	20 64       	ori	r18, 0x40	; 64
 b66:	26 b9       	out	0x06, r18	; 6
 b68:	26 b1       	in	r18, 0x06	; 6
 b6a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <mcal_adc_read>
 b6e:	96 b1       	in	r25, 0x06	; 6
 b70:	90 61       	ori	r25, 0x10	; 16
 b72:	96 b9       	out	0x06, r25	; 6
 b74:	08 95       	ret
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	08 95       	ret
 b7a:	80 e0       	ldi	r24, 0x00	; 0
 b7c:	08 95       	ret

00000b7e <mcal_gpio_pin_direction_intiallize>:
	else{
		*my_direction=my_gpio_pin->direction;
	}
	return ret;
	
}
 b7e:	fc 01       	movw	r30, r24
 b80:	89 2b       	or	r24, r25
 b82:	99 f1       	breq	.+102    	; 0xbea <mcal_gpio_pin_direction_intiallize+0x6c>
 b84:	20 81       	ld	r18, Z
 b86:	26 95       	lsr	r18
 b88:	26 95       	lsr	r18
 b8a:	27 70       	andi	r18, 0x07	; 7
 b8c:	40 81       	ld	r20, Z
 b8e:	43 70       	andi	r20, 0x03	; 3
 b90:	50 e0       	ldi	r21, 0x00	; 0
 b92:	80 81       	ld	r24, Z
 b94:	85 fd       	sbrc	r24, 5
 b96:	15 c0       	rjmp	.+42     	; 0xbc2 <mcal_gpio_pin_direction_intiallize+0x44>
 b98:	44 0f       	add	r20, r20
 b9a:	55 1f       	adc	r21, r21
 b9c:	fa 01       	movw	r30, r20
 b9e:	e5 59       	subi	r30, 0x95	; 149
 ba0:	ff 4f       	sbci	r31, 0xFF	; 255
 ba2:	01 90       	ld	r0, Z+
 ba4:	f0 81       	ld	r31, Z
 ba6:	e0 2d       	mov	r30, r0
 ba8:	30 81       	ld	r19, Z
 baa:	81 e0       	ldi	r24, 0x01	; 1
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	02 c0       	rjmp	.+4      	; 0xbb4 <mcal_gpio_pin_direction_intiallize+0x36>
 bb0:	88 0f       	add	r24, r24
 bb2:	99 1f       	adc	r25, r25
 bb4:	2a 95       	dec	r18
 bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <mcal_gpio_pin_direction_intiallize+0x32>
 bb8:	80 95       	com	r24
 bba:	83 23       	and	r24, r19
 bbc:	80 83       	st	Z, r24
 bbe:	81 e0       	ldi	r24, 0x01	; 1
 bc0:	08 95       	ret
 bc2:	44 0f       	add	r20, r20
 bc4:	55 1f       	adc	r21, r21
 bc6:	fa 01       	movw	r30, r20
 bc8:	e5 59       	subi	r30, 0x95	; 149
 bca:	ff 4f       	sbci	r31, 0xFF	; 255
 bcc:	01 90       	ld	r0, Z+
 bce:	f0 81       	ld	r31, Z
 bd0:	e0 2d       	mov	r30, r0
 bd2:	30 81       	ld	r19, Z
 bd4:	81 e0       	ldi	r24, 0x01	; 1
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <mcal_gpio_pin_direction_intiallize+0x60>
 bda:	88 0f       	add	r24, r24
 bdc:	99 1f       	adc	r25, r25
 bde:	2a 95       	dec	r18
 be0:	e2 f7       	brpl	.-8      	; 0xbda <mcal_gpio_pin_direction_intiallize+0x5c>
 be2:	83 2b       	or	r24, r19
 be4:	80 83       	st	Z, r24
 be6:	81 e0       	ldi	r24, 0x01	; 1
 be8:	08 95       	ret
 bea:	80 e0       	ldi	r24, 0x00	; 0
 bec:	08 95       	ret

00000bee <mcal_gpio_pin_output_write_logic>:
std_return_type mcal_gpio_pin_output_write_logic(gpio_pin_config*my_gpio_pin ,gpio_logic my_logic)
{
	std_return_type ret=OK;
	if((NULL==my_gpio_pin))
 bee:	00 97       	sbiw	r24, 0x00	; 0
 bf0:	09 f4       	brne	.+2      	; 0xbf4 <mcal_gpio_pin_output_write_logic+0x6>
 bf2:	40 c0       	rjmp	.+128    	; 0xc74 <mcal_gpio_pin_output_write_logic+0x86>
	{
		ret=NOT_OK;
	}
	else{
		switch(my_logic)
 bf4:	66 23       	and	r22, r22
 bf6:	19 f0       	breq	.+6      	; 0xbfe <mcal_gpio_pin_output_write_logic+0x10>
 bf8:	61 30       	cpi	r22, 0x01	; 1
 bfa:	f9 f0       	breq	.+62     	; 0xc3a <mcal_gpio_pin_output_write_logic+0x4c>
 bfc:	3d c0       	rjmp	.+122    	; 0xc78 <mcal_gpio_pin_output_write_logic+0x8a>
		{
			case low:
			CLEAR_BIT(*gpio_port_reg[my_gpio_pin->port],my_gpio_pin->pin);
 bfe:	fc 01       	movw	r30, r24
 c00:	80 81       	ld	r24, Z
 c02:	e8 2f       	mov	r30, r24
 c04:	e3 70       	andi	r30, 0x03	; 3
 c06:	f0 e0       	ldi	r31, 0x00	; 0
 c08:	ee 0f       	add	r30, r30
 c0a:	ff 1f       	adc	r31, r31
 c0c:	ed 59       	subi	r30, 0x9D	; 157
 c0e:	ff 4f       	sbci	r31, 0xFF	; 255
 c10:	01 90       	ld	r0, Z+
 c12:	f0 81       	ld	r31, Z
 c14:	e0 2d       	mov	r30, r0
 c16:	40 81       	ld	r20, Z
 c18:	86 95       	lsr	r24
 c1a:	86 95       	lsr	r24
 c1c:	87 70       	andi	r24, 0x07	; 7
 c1e:	21 e0       	ldi	r18, 0x01	; 1
 c20:	30 e0       	ldi	r19, 0x00	; 0
 c22:	b9 01       	movw	r22, r18
 c24:	02 c0       	rjmp	.+4      	; 0xc2a <mcal_gpio_pin_output_write_logic+0x3c>
 c26:	66 0f       	add	r22, r22
 c28:	77 1f       	adc	r23, r23
 c2a:	8a 95       	dec	r24
 c2c:	e2 f7       	brpl	.-8      	; 0xc26 <mcal_gpio_pin_output_write_logic+0x38>
 c2e:	cb 01       	movw	r24, r22
 c30:	80 95       	com	r24
 c32:	84 23       	and	r24, r20
 c34:	80 83       	st	Z, r24
	return ret;
	
}
std_return_type mcal_gpio_pin_output_write_logic(gpio_pin_config*my_gpio_pin ,gpio_logic my_logic)
{
	std_return_type ret=OK;
 c36:	81 e0       	ldi	r24, 0x01	; 1
	else{
		switch(my_logic)
		{
			case low:
			CLEAR_BIT(*gpio_port_reg[my_gpio_pin->port],my_gpio_pin->pin);
			break;
 c38:	08 95       	ret
			case high:
			SET_BIT(*gpio_port_reg[my_gpio_pin->port],my_gpio_pin->pin);
 c3a:	fc 01       	movw	r30, r24
 c3c:	80 81       	ld	r24, Z
 c3e:	e8 2f       	mov	r30, r24
 c40:	e3 70       	andi	r30, 0x03	; 3
 c42:	f0 e0       	ldi	r31, 0x00	; 0
 c44:	ee 0f       	add	r30, r30
 c46:	ff 1f       	adc	r31, r31
 c48:	ed 59       	subi	r30, 0x9D	; 157
 c4a:	ff 4f       	sbci	r31, 0xFF	; 255
 c4c:	01 90       	ld	r0, Z+
 c4e:	f0 81       	ld	r31, Z
 c50:	e0 2d       	mov	r30, r0
 c52:	40 81       	ld	r20, Z
 c54:	86 95       	lsr	r24
 c56:	86 95       	lsr	r24
 c58:	87 70       	andi	r24, 0x07	; 7
 c5a:	21 e0       	ldi	r18, 0x01	; 1
 c5c:	30 e0       	ldi	r19, 0x00	; 0
 c5e:	b9 01       	movw	r22, r18
 c60:	02 c0       	rjmp	.+4      	; 0xc66 <mcal_gpio_pin_output_write_logic+0x78>
 c62:	66 0f       	add	r22, r22
 c64:	77 1f       	adc	r23, r23
 c66:	8a 95       	dec	r24
 c68:	e2 f7       	brpl	.-8      	; 0xc62 <mcal_gpio_pin_output_write_logic+0x74>
 c6a:	cb 01       	movw	r24, r22
 c6c:	84 2b       	or	r24, r20
 c6e:	80 83       	st	Z, r24
	return ret;
	
}
std_return_type mcal_gpio_pin_output_write_logic(gpio_pin_config*my_gpio_pin ,gpio_logic my_logic)
{
	std_return_type ret=OK;
 c70:	81 e0       	ldi	r24, 0x01	; 1
			case low:
			CLEAR_BIT(*gpio_port_reg[my_gpio_pin->port],my_gpio_pin->pin);
			break;
			case high:
			SET_BIT(*gpio_port_reg[my_gpio_pin->port],my_gpio_pin->pin);
			break;
 c72:	08 95       	ret
std_return_type mcal_gpio_pin_output_write_logic(gpio_pin_config*my_gpio_pin ,gpio_logic my_logic)
{
	std_return_type ret=OK;
	if((NULL==my_gpio_pin))
	{
		ret=NOT_OK;
 c74:	80 e0       	ldi	r24, 0x00	; 0
 c76:	08 95       	ret
	return ret;
	
}
std_return_type mcal_gpio_pin_output_write_logic(gpio_pin_config*my_gpio_pin ,gpio_logic my_logic)
{
	std_return_type ret=OK;
 c78:	81 e0       	ldi	r24, 0x01	; 1
			SET_BIT(*gpio_port_reg[my_gpio_pin->port],my_gpio_pin->pin);
			break;
		}
	}
	return ret;
}
 c7a:	08 95       	ret

00000c7c <mcal_PWM0_intiallize>:
 c7c:	00 97       	sbiw	r24, 0x00	; 0
 c7e:	49 f1       	breq	.+82     	; 0xcd2 <mcal_PWM0_intiallize+0x56>
 c80:	fc 01       	movw	r30, r24
 c82:	80 81       	ld	r24, Z
 c84:	81 30       	cpi	r24, 0x01	; 1
 c86:	19 f0       	breq	.+6      	; 0xc8e <mcal_PWM0_intiallize+0x12>
 c88:	83 30       	cpi	r24, 0x03	; 3
 c8a:	89 f0       	breq	.+34     	; 0xcae <mcal_PWM0_intiallize+0x32>
 c8c:	1f c0       	rjmp	.+62     	; 0xccc <mcal_PWM0_intiallize+0x50>
 c8e:	83 b7       	in	r24, 0x33	; 51
 c90:	80 64       	ori	r24, 0x40	; 64
 c92:	83 bf       	out	0x33, r24	; 51
 c94:	83 b7       	in	r24, 0x33	; 51
 c96:	87 7f       	andi	r24, 0xF7	; 247
 c98:	83 bf       	out	0x33, r24	; 51
 c9a:	83 b7       	in	r24, 0x33	; 51
 c9c:	8f 7e       	andi	r24, 0xEF	; 239
 c9e:	83 bf       	out	0x33, r24	; 51
 ca0:	83 b7       	in	r24, 0x33	; 51
 ca2:	80 62       	ori	r24, 0x20	; 32
 ca4:	83 bf       	out	0x33, r24	; 51
 ca6:	81 81       	ldd	r24, Z+1	; 0x01
 ca8:	0e 94 80 06 	call	0xd00	; 0xd00 <mcal_timer0_select_prescalar>
 cac:	0f c0       	rjmp	.+30     	; 0xccc <mcal_PWM0_intiallize+0x50>
 cae:	83 b7       	in	r24, 0x33	; 51
 cb0:	80 64       	ori	r24, 0x40	; 64
 cb2:	83 bf       	out	0x33, r24	; 51
 cb4:	83 b7       	in	r24, 0x33	; 51
 cb6:	88 60       	ori	r24, 0x08	; 8
 cb8:	83 bf       	out	0x33, r24	; 51
 cba:	83 b7       	in	r24, 0x33	; 51
 cbc:	8f 7e       	andi	r24, 0xEF	; 239
 cbe:	83 bf       	out	0x33, r24	; 51
 cc0:	83 b7       	in	r24, 0x33	; 51
 cc2:	80 62       	ori	r24, 0x20	; 32
 cc4:	83 bf       	out	0x33, r24	; 51
 cc6:	81 81       	ldd	r24, Z+1	; 0x01
 cc8:	0e 94 80 06 	call	0xd00	; 0xd00 <mcal_timer0_select_prescalar>
 ccc:	87 b3       	in	r24, 0x17	; 23
 cce:	88 60       	ori	r24, 0x08	; 8
 cd0:	87 bb       	out	0x17, r24	; 23
 cd2:	08 95       	ret

00000cd4 <mcal_PWM0_increase_to_value>:
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	02 c0       	rjmp	.+4      	; 0xcdc <mcal_PWM0_increase_to_value+0x8>
 cd8:	9c bf       	out	0x3c, r25	; 60
 cda:	9f 5f       	subi	r25, 0xFF	; 255
 cdc:	89 17       	cp	r24, r25
 cde:	e0 f7       	brcc	.-8      	; 0xcd8 <mcal_PWM0_increase_to_value+0x4>
 ce0:	81 e0       	ldi	r24, 0x01	; 1
 ce2:	08 95       	ret

00000ce4 <mcal_PWM0_decrease_from_value>:
 ce4:	02 c0       	rjmp	.+4      	; 0xcea <mcal_PWM0_decrease_from_value+0x6>
 ce6:	8c bf       	out	0x3c, r24	; 60
 ce8:	81 50       	subi	r24, 0x01	; 1
 cea:	82 30       	cpi	r24, 0x02	; 2
 cec:	e0 f7       	brcc	.-8      	; 0xce6 <mcal_PWM0_decrease_from_value+0x2>
 cee:	81 e0       	ldi	r24, 0x01	; 1
 cf0:	08 95       	ret

00000cf2 <mcal_PWM0_start_to_end>:
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <mcal_PWM0_start_to_end+0x6>
 cf4:	8c bf       	out	0x3c, r24	; 60
 cf6:	8f 5f       	subi	r24, 0xFF	; 255
 cf8:	68 17       	cp	r22, r24
 cfa:	e0 f7       	brcc	.-8      	; 0xcf4 <mcal_PWM0_start_to_end+0x2>
 cfc:	81 e0       	ldi	r24, 0x01	; 1
 cfe:	08 95       	ret

00000d00 <mcal_timer0_select_prescalar>:
}

 std_return_type mcal_timer0_select_prescalar(timer0_clock_select_and_prescalar prescalar)
{
	std_return_type ret=OK;
	if(NULL==prescalar)
 d00:	88 23       	and	r24, r24
 d02:	09 f4       	brne	.+2      	; 0xd06 <mcal_timer0_select_prescalar+0x6>
 d04:	6d c0       	rjmp	.+218    	; 0xde0 <mcal_timer0_select_prescalar+0xe0>
	{
		ret=NOT_OK;
	}
	else{
		switch(prescalar)
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	88 30       	cpi	r24, 0x08	; 8
 d0a:	91 05       	cpc	r25, r1
 d0c:	08 f0       	brcs	.+2      	; 0xd10 <mcal_timer0_select_prescalar+0x10>
 d0e:	5d c0       	rjmp	.+186    	; 0xdca <mcal_timer0_select_prescalar+0xca>
 d10:	fc 01       	movw	r30, r24
 d12:	e7 5c       	subi	r30, 0xC7	; 199
 d14:	ff 4f       	sbci	r31, 0xFF	; 255
 d16:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__tablejump2__>
		{
			case no_clock:
			TIMER0_CLOCK_OFF();
 d1a:	83 b7       	in	r24, 0x33	; 51
 d1c:	8b 7f       	andi	r24, 0xFB	; 251
 d1e:	83 bf       	out	0x33, r24	; 51
 d20:	83 b7       	in	r24, 0x33	; 51
 d22:	8d 7f       	andi	r24, 0xFD	; 253
 d24:	83 bf       	out	0x33, r24	; 51
 d26:	83 b7       	in	r24, 0x33	; 51
 d28:	8e 7f       	andi	r24, 0xFE	; 254
 d2a:	83 bf       	out	0x33, r24	; 51
	return ret;
}

 std_return_type mcal_timer0_select_prescalar(timer0_clock_select_and_prescalar prescalar)
{
	std_return_type ret=OK;
 d2c:	81 e0       	ldi	r24, 0x01	; 1
	else{
		switch(prescalar)
		{
			case no_clock:
			TIMER0_CLOCK_OFF();
			break;
 d2e:	08 95       	ret
			
			case no_prescalar:
			TIMER0_CLOCK_NO_PRESCALING();
 d30:	83 b7       	in	r24, 0x33	; 51
 d32:	8b 7f       	andi	r24, 0xFB	; 251
 d34:	83 bf       	out	0x33, r24	; 51
 d36:	83 b7       	in	r24, 0x33	; 51
 d38:	8d 7f       	andi	r24, 0xFD	; 253
 d3a:	83 bf       	out	0x33, r24	; 51
 d3c:	83 b7       	in	r24, 0x33	; 51
 d3e:	81 60       	ori	r24, 0x01	; 1
 d40:	83 bf       	out	0x33, r24	; 51
	return ret;
}

 std_return_type mcal_timer0_select_prescalar(timer0_clock_select_and_prescalar prescalar)
{
	std_return_type ret=OK;
 d42:	81 e0       	ldi	r24, 0x01	; 1
			TIMER0_CLOCK_OFF();
			break;
			
			case no_prescalar:
			TIMER0_CLOCK_NO_PRESCALING();
			break;
 d44:	08 95       	ret
			
			case prescalar_divide_by_8:
			TIMER0_CLOCK_8_PRESCALING();
 d46:	83 b7       	in	r24, 0x33	; 51
 d48:	8b 7f       	andi	r24, 0xFB	; 251
 d4a:	83 bf       	out	0x33, r24	; 51
 d4c:	83 b7       	in	r24, 0x33	; 51
 d4e:	82 60       	ori	r24, 0x02	; 2
 d50:	83 bf       	out	0x33, r24	; 51
 d52:	83 b7       	in	r24, 0x33	; 51
 d54:	8e 7f       	andi	r24, 0xFE	; 254
 d56:	83 bf       	out	0x33, r24	; 51
	return ret;
}

 std_return_type mcal_timer0_select_prescalar(timer0_clock_select_and_prescalar prescalar)
{
	std_return_type ret=OK;
 d58:	81 e0       	ldi	r24, 0x01	; 1
			TIMER0_CLOCK_NO_PRESCALING();
			break;
			
			case prescalar_divide_by_8:
			TIMER0_CLOCK_8_PRESCALING();
			break;
 d5a:	08 95       	ret
			
			case prescalar_divide_by_64:
			TIMER0_CLOCK_64_PRESCALING();
 d5c:	83 b7       	in	r24, 0x33	; 51
 d5e:	8b 7f       	andi	r24, 0xFB	; 251
 d60:	83 bf       	out	0x33, r24	; 51
 d62:	83 b7       	in	r24, 0x33	; 51
 d64:	82 60       	ori	r24, 0x02	; 2
 d66:	83 bf       	out	0x33, r24	; 51
 d68:	83 b7       	in	r24, 0x33	; 51
 d6a:	81 60       	ori	r24, 0x01	; 1
 d6c:	83 bf       	out	0x33, r24	; 51
	return ret;
}

 std_return_type mcal_timer0_select_prescalar(timer0_clock_select_and_prescalar prescalar)
{
	std_return_type ret=OK;
 d6e:	81 e0       	ldi	r24, 0x01	; 1
			TIMER0_CLOCK_8_PRESCALING();
			break;
			
			case prescalar_divide_by_64:
			TIMER0_CLOCK_64_PRESCALING();
			break;
 d70:	08 95       	ret
			
			case prescalar_divide_by_256:
			TIMER0_CLOCK_256_PRESCALING();
 d72:	83 b7       	in	r24, 0x33	; 51
 d74:	84 60       	ori	r24, 0x04	; 4
 d76:	83 bf       	out	0x33, r24	; 51
 d78:	83 b7       	in	r24, 0x33	; 51
 d7a:	8d 7f       	andi	r24, 0xFD	; 253
 d7c:	83 bf       	out	0x33, r24	; 51
 d7e:	83 b7       	in	r24, 0x33	; 51
 d80:	8e 7f       	andi	r24, 0xFE	; 254
 d82:	83 bf       	out	0x33, r24	; 51
	return ret;
}

 std_return_type mcal_timer0_select_prescalar(timer0_clock_select_and_prescalar prescalar)
{
	std_return_type ret=OK;
 d84:	81 e0       	ldi	r24, 0x01	; 1
			TIMER0_CLOCK_64_PRESCALING();
			break;
			
			case prescalar_divide_by_256:
			TIMER0_CLOCK_256_PRESCALING();
			break;
 d86:	08 95       	ret
			
			case prescalar_divide_by_1024:
			TIMER0_CLOCK_1024_PRESCALING();
 d88:	83 b7       	in	r24, 0x33	; 51
 d8a:	84 60       	ori	r24, 0x04	; 4
 d8c:	83 bf       	out	0x33, r24	; 51
 d8e:	83 b7       	in	r24, 0x33	; 51
 d90:	8d 7f       	andi	r24, 0xFD	; 253
 d92:	83 bf       	out	0x33, r24	; 51
 d94:	83 b7       	in	r24, 0x33	; 51
 d96:	81 60       	ori	r24, 0x01	; 1
 d98:	83 bf       	out	0x33, r24	; 51
	return ret;
}

 std_return_type mcal_timer0_select_prescalar(timer0_clock_select_and_prescalar prescalar)
{
	std_return_type ret=OK;
 d9a:	81 e0       	ldi	r24, 0x01	; 1
			TIMER0_CLOCK_256_PRESCALING();
			break;
			
			case prescalar_divide_by_1024:
			TIMER0_CLOCK_1024_PRESCALING();
			break;
 d9c:	08 95       	ret
			
			case external_clock_T0_falling_edge:
			TIMER0_EXTERNAL_CLOCK_T0_FALLING_EDGE();
 d9e:	83 b7       	in	r24, 0x33	; 51
 da0:	84 60       	ori	r24, 0x04	; 4
 da2:	83 bf       	out	0x33, r24	; 51
 da4:	83 b7       	in	r24, 0x33	; 51
 da6:	82 60       	ori	r24, 0x02	; 2
 da8:	83 bf       	out	0x33, r24	; 51
 daa:	83 b7       	in	r24, 0x33	; 51
 dac:	8e 7f       	andi	r24, 0xFE	; 254
 dae:	83 bf       	out	0x33, r24	; 51
	return ret;
}

 std_return_type mcal_timer0_select_prescalar(timer0_clock_select_and_prescalar prescalar)
{
	std_return_type ret=OK;
 db0:	81 e0       	ldi	r24, 0x01	; 1
			TIMER0_CLOCK_1024_PRESCALING();
			break;
			
			case external_clock_T0_falling_edge:
			TIMER0_EXTERNAL_CLOCK_T0_FALLING_EDGE();
			break;
 db2:	08 95       	ret
			
			case external_clock_T0_rising_edge:
			TIMER0_EXTERNAL_CLOCK_T0_RISING_EDGE();
 db4:	83 b7       	in	r24, 0x33	; 51
 db6:	84 60       	ori	r24, 0x04	; 4
 db8:	83 bf       	out	0x33, r24	; 51
 dba:	83 b7       	in	r24, 0x33	; 51
 dbc:	82 60       	ori	r24, 0x02	; 2
 dbe:	83 bf       	out	0x33, r24	; 51
 dc0:	83 b7       	in	r24, 0x33	; 51
 dc2:	81 60       	ori	r24, 0x01	; 1
 dc4:	83 bf       	out	0x33, r24	; 51
	return ret;
}

 std_return_type mcal_timer0_select_prescalar(timer0_clock_select_and_prescalar prescalar)
{
	std_return_type ret=OK;
 dc6:	81 e0       	ldi	r24, 0x01	; 1
			TIMER0_EXTERNAL_CLOCK_T0_FALLING_EDGE();
			break;
			
			case external_clock_T0_rising_edge:
			TIMER0_EXTERNAL_CLOCK_T0_RISING_EDGE();
			break;
 dc8:	08 95       	ret
			
			default:
			TIMER0_CLOCK_NO_PRESCALING();
 dca:	83 b7       	in	r24, 0x33	; 51
 dcc:	8b 7f       	andi	r24, 0xFB	; 251
 dce:	83 bf       	out	0x33, r24	; 51
 dd0:	83 b7       	in	r24, 0x33	; 51
 dd2:	8d 7f       	andi	r24, 0xFD	; 253
 dd4:	83 bf       	out	0x33, r24	; 51
 dd6:	83 b7       	in	r24, 0x33	; 51
 dd8:	81 60       	ori	r24, 0x01	; 1
 dda:	83 bf       	out	0x33, r24	; 51
	return ret;
}

 std_return_type mcal_timer0_select_prescalar(timer0_clock_select_and_prescalar prescalar)
{
	std_return_type ret=OK;
 ddc:	81 e0       	ldi	r24, 0x01	; 1
			TIMER0_EXTERNAL_CLOCK_T0_RISING_EDGE();
			break;
			
			default:
			TIMER0_CLOCK_NO_PRESCALING();
			break;
 dde:	08 95       	ret
 std_return_type mcal_timer0_select_prescalar(timer0_clock_select_and_prescalar prescalar)
{
	std_return_type ret=OK;
	if(NULL==prescalar)
	{
		ret=NOT_OK;
 de0:	80 e0       	ldi	r24, 0x00	; 0
			TIMER0_CLOCK_NO_PRESCALING();
			break;
		}
	}
	return ret;
 de2:	08 95       	ret

00000de4 <USART_Init>:
 de4:	83 e3       	ldi	r24, 0x33	; 51
 de6:	89 b9       	out	0x09, r24	; 9
 de8:	88 e9       	ldi	r24, 0x98	; 152
 dea:	8a b9       	out	0x0a, r24	; 10
 dec:	86 e0       	ldi	r24, 0x06	; 6
 dee:	80 bd       	out	0x20, r24	; 32
 df0:	08 95       	ret

00000df2 <USART_Transmit>:
 df2:	5d 9b       	sbis	0x0b, 5	; 11
 df4:	fe cf       	rjmp	.-4      	; 0xdf2 <USART_Transmit>
 df6:	8c b9       	out	0x0c, r24	; 12
 df8:	08 95       	ret

00000dfa <USART_TransmitString>:
 dfa:	cf 93       	push	r28
 dfc:	df 93       	push	r29
 dfe:	ec 01       	movw	r28, r24
 e00:	03 c0       	rjmp	.+6      	; 0xe08 <USART_TransmitString+0xe>
 e02:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <USART_Transmit>
 e06:	21 96       	adiw	r28, 0x01	; 1
 e08:	88 81       	ld	r24, Y
 e0a:	81 11       	cpse	r24, r1
 e0c:	fa cf       	rjmp	.-12     	; 0xe02 <USART_TransmitString+0x8>
 e0e:	df 91       	pop	r29
 e10:	cf 91       	pop	r28
 e12:	08 95       	ret

00000e14 <__tablejump2__>:
 e14:	ee 0f       	add	r30, r30
 e16:	ff 1f       	adc	r31, r31
 e18:	05 90       	lpm	r0, Z+
 e1a:	f4 91       	lpm	r31, Z
 e1c:	e0 2d       	mov	r30, r0
 e1e:	09 94       	ijmp

00000e20 <__umulhisi3>:
 e20:	a2 9f       	mul	r26, r18
 e22:	b0 01       	movw	r22, r0
 e24:	b3 9f       	mul	r27, r19
 e26:	c0 01       	movw	r24, r0
 e28:	a3 9f       	mul	r26, r19
 e2a:	70 0d       	add	r23, r0
 e2c:	81 1d       	adc	r24, r1
 e2e:	11 24       	eor	r1, r1
 e30:	91 1d       	adc	r25, r1
 e32:	b2 9f       	mul	r27, r18
 e34:	70 0d       	add	r23, r0
 e36:	81 1d       	adc	r24, r1
 e38:	11 24       	eor	r1, r1
 e3a:	91 1d       	adc	r25, r1
 e3c:	08 95       	ret

00000e3e <_exit>:
 e3e:	f8 94       	cli

00000e40 <__stop_program>:
 e40:	ff cf       	rjmp	.-2      	; 0xe40 <__stop_program>
